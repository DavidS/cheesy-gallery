# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/safe_yaml/all/safe_yaml.rbi
#
# safe_yaml-1.0.5

module SafeYAML
  def restore_defaults!; end
  def self.load(yaml, filename = nil, options = nil); end
  def self.load_file(filename, options = nil); end
  def self.restore_defaults!; end
  def self.tag_is_explicitly_trusted?(tag); end
  def self.tag_safety_check!(tag, options); end
  def self.whitelist!(*classes); end
  def self.whitelist_class!(klass); end
  def tag_is_explicitly_trusted?(tag); end
  def tag_safety_check!(tag, options); end
  def whitelist!(*classes); end
  def whitelist_class!(klass); end
end
class SafeYAML::LibyamlChecker
  def self.libyaml_patched?; end
  def self.libyaml_version_ok?; end
end
class SafeYAML::Deep
  def self.copy(object); end
  def self.freeze(object); end
end
class SafeYAML::Parse
end
class SafeYAML::Parse::Hexadecimal
  def self.value(value); end
end
class SafeYAML::Parse::Sexagesimal
  def self.value(value); end
end
class SafeYAML::Parse::Date
  def self.value(value); end
end
class SafeYAML::Transform
  def self.to_guessed_type(value, quoted = nil, options = nil); end
  def self.to_proper_type(value, quoted = nil, tag = nil, options = nil); end
end
module SafeYAML::Transform::TransformationMap
  def self.included(base); end
end
class SafeYAML::Transform::TransformationMap::CaseAgnosticMap < Hash
  def [](key); end
  def freeze; end
  def include?(key); end
  def initialize(*args); end
end
module SafeYAML::Transform::TransformationMap::ClassMethods
  def set_predefined_values(predefined_values); end
end
class SafeYAML::Transform::ToBoolean
  def transform?(value); end
  extend SafeYAML::Transform::TransformationMap::ClassMethods
  include SafeYAML::Transform::TransformationMap
end
class SafeYAML::Transform::ToDate
  def transform?(value); end
end
class SafeYAML::Transform::ToFloat
  def transform?(value); end
  def try_edge_cases?(value); end
end
class SafeYAML::Transform::ToInteger
  def transform?(value); end
  def try_edge_cases?(value); end
end
class SafeYAML::Transform::ToNil
  def transform?(value); end
  extend SafeYAML::Transform::TransformationMap::ClassMethods
  include SafeYAML::Transform::TransformationMap
end
class SafeYAML::Transform::ToSymbol
  def transform?(value, options = nil); end
end
class SafeYAML::Resolver
  def get_and_check_node_tag(node); end
  def initialize(options); end
  def merge_into_hash(hash, array); end
  def normalize_map(map); end
  def options; end
  def resolve_map(node); end
  def resolve_node(node); end
  def resolve_scalar(node); end
  def resolve_seq(node); end
  def tag_is_whitelisted?(tag); end
end
class SafeYAML::PsychHandler < Psych::Handler
  def add_to_current_structure(value, anchor = nil, quoted = nil, tag = nil); end
  def alias(anchor); end
  def end_current_structure; end
  def end_document(implicit); end
  def end_mapping; end
  def end_sequence; end
  def initialize(options, &block); end
  def result; end
  def scalar(value, anchor, tag, plain, quoted, style); end
  def start_mapping(anchor, tag, implicit, style); end
  def start_sequence(anchor, tag, implicit, style); end
  def streaming?; end
end
class SafeYAML::PsychResolver < SafeYAML::Resolver
  def get_node_tag(node); end
  def get_node_type(node); end
  def get_node_value(node); end
  def initialize(options = nil); end
  def native_resolve(node); end
  def resolve_alias(node); end
  def resolve_root(root); end
  def value_is_quoted?(node); end
end
class SafeYAML::SafeToRubyVisitor < Psych::Visitors::ToRuby
  def accept(node); end
  def initialize(resolver); end
end

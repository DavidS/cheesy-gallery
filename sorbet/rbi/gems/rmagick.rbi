# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rmagick/all/rmagick.rbi
#
# rmagick-4.2.2

module Magick
  def colors; end
  def fonts; end
  def init_formats; end
  def limit_resource(*arg0); end
  def self.colors; end
  def self.fonts; end
  def self.formats; end
  def self.init_formats; end
  def self.limit_resource(*arg0); end
  def self.set_cache_threshold(arg0); end
  def self.set_log_event_mask(*arg0); end
  def self.set_log_format(arg0); end
  def self.trace_proc=(p); end
  def set_cache_threshold(arg0); end
  def set_log_event_mask(*arg0); end
  def set_log_format(arg0); end
end
class Magick::Image
  def <=>(arg0); end
  def [](arg0); end
  def []=(arg0, arg1); end
  def __display__(*arg0); end
  def _dump(arg0); end
  def adaptive_blur(*arg0); end
  def adaptive_blur_channel(*arg0); end
  def adaptive_resize(*arg0); end
  def adaptive_sharpen(*arg0); end
  def adaptive_sharpen_channel(*arg0); end
  def adaptive_threshold(*arg0); end
  def add_compose_mask(arg0); end
  def add_noise(arg0); end
  def add_noise_channel(*arg0); end
  def add_profile(arg0); end
  def affine_transform(arg0); end
  def affinity(*arg0); end
  def alpha(*arg0); end
  def alpha?; end
  def annotate(draw, width, height, x, y, text, &block); end
  def auto_gamma_channel(*arg0); end
  def auto_level_channel(*arg0); end
  def auto_orient!; end
  def auto_orient; end
  def background_color; end
  def background_color=(arg0); end
  def base_columns; end
  def base_filename; end
  def base_rows; end
  def bias; end
  def bias=(arg0); end
  def bilevel_channel(*arg0); end
  def black_point_compensation; end
  def black_point_compensation=(arg0); end
  def black_threshold(*arg0); end
  def blend(*arg0); end
  def blue_shift(*arg0); end
  def blur_channel(*arg0); end
  def blur_image(*arg0); end
  def border!(arg0, arg1, arg2); end
  def border(arg0, arg1, arg2); end
  def border_color; end
  def border_color=(arg0); end
  def bounding_box; end
  def change_geometry!(arg0); end
  def change_geometry(arg0); end
  def changed?; end
  def channel(arg0); end
  def channel_compare(*arg0); end
  def channel_depth(*arg0); end
  def channel_entropy(*arg0); end
  def channel_extrema(*arg0); end
  def channel_mean(*arg0); end
  def charcoal(*arg0); end
  def check_destroyed; end
  def chop(arg0, arg1, arg2, arg3); end
  def chromaticity; end
  def chromaticity=(arg0); end
  def class_type; end
  def class_type=(arg0); end
  def clone; end
  def clut_channel(*arg0); end
  def color_fill_to_border(x, y, fill); end
  def color_flood_fill(arg0, arg1, arg2, arg3, arg4); end
  def color_floodfill(x, y, fill); end
  def color_histogram; end
  def color_point(x, y, fill); end
  def color_profile; end
  def color_profile=(arg0); end
  def color_reset!(fill); end
  def colorize(*arg0); end
  def colormap(*arg0); end
  def colors; end
  def colorspace; end
  def colorspace=(arg0); end
  def columns; end
  def compare_channel(*arg0); end
  def compose; end
  def compose=(arg0); end
  def composite!(*arg0); end
  def composite(*arg0); end
  def composite_affine(arg0, arg1); end
  def composite_channel!(*arg0); end
  def composite_channel(*arg0); end
  def composite_mathematics(*arg0); end
  def composite_tiled!(*arg0); end
  def composite_tiled(*arg0); end
  def compress_colormap!; end
  def compression; end
  def compression=(arg0); end
  def contrast(*arg0); end
  def contrast_stretch_channel(*arg0); end
  def convolve(arg0, arg1); end
  def convolve_channel(*arg0); end
  def copy; end
  def crop!(*arg0); end
  def crop(*arg0); end
  def crop_resized!(ncols, nrows = nil, gravity = nil); end
  def crop_resized(ncols, nrows = nil, gravity = nil); end
  def cur_image; end
  def cycle_colormap(arg0); end
  def decipher(arg0); end
  def define(arg0, arg1); end
  def delay; end
  def delay=(arg0); end
  def delete_compose_mask; end
  def delete_profile(arg0); end
  def density; end
  def density=(arg0); end
  def depth; end
  def deskew(*arg0); end
  def despeckle; end
  def destroy!; end
  def destroyed?; end
  def difference(arg0); end
  def directory; end
  def dispatch(*arg0); end
  def displace(*arg0); end
  def display; end
  def dispose; end
  def dispose=(arg0); end
  def dissolve(*arg0); end
  def distort(*arg0); end
  def distortion_channel(*arg0); end
  def dup; end
  def each_iptc_dataset; end
  def each_pixel; end
  def each_profile; end
  def edge(*arg0); end
  def emboss(*arg0); end
  def encipher(arg0); end
  def endian; end
  def endian=(arg0); end
  def enhance; end
  def equalize; end
  def equalize_channel(*arg0); end
  def erase!; end
  def excerpt!(arg0, arg1, arg2, arg3); end
  def excerpt(arg0, arg1, arg2, arg3); end
  def export_pixels(*arg0); end
  def export_pixels_to_str(*arg0); end
  def extent(*arg0); end
  def extract_info; end
  def extract_info=(arg0); end
  def filename; end
  def filesize; end
  def filter; end
  def filter=(arg0); end
  def find_similar_region(*arg0); end
  def flip!; end
  def flip; end
  def flop!; end
  def flop; end
  def format; end
  def format=(arg0); end
  def frame(*arg0); end
  def function_channel(*arg0); end
  def fuzz; end
  def fuzz=(arg0); end
  def fx(*arg0); end
  def gamma; end
  def gamma=(arg0); end
  def gamma_channel(*arg0); end
  def gamma_correct(*arg0); end
  def gaussian_blur(*arg0); end
  def gaussian_blur_channel(*arg0); end
  def geometry; end
  def geometry=(arg0); end
  def get_exif_by_entry(*entry); end
  def get_exif_by_number(*tag); end
  def get_iptc_dataset(ds); end
  def get_pixels(arg0, arg1, arg2, arg3); end
  def gravity; end
  def gravity=(arg0); end
  def gray?; end
  def grey?; end
  def histogram?; end
  def image_type; end
  def image_type=(arg0); end
  def implode(*arg0); end
  def import_pixels(*arg0); end
  def initialize(*arg0); end
  def initialize_copy(arg0); end
  def inspect; end
  def interlace; end
  def interlace=(arg0); end
  def iptc_profile; end
  def iptc_profile=(arg0); end
  def iterations; end
  def iterations=(arg0); end
  def level(black_point = nil, white_point = nil, gamma = nil); end
  def level2(*arg0); end
  def level_channel(*arg0); end
  def level_colors(*arg0); end
  def levelize_channel(*arg0); end
  def linear_stretch(*arg0); end
  def liquid_rescale(*arg0); end
  def magnify!; end
  def magnify; end
  def marshal_dump; end
  def marshal_load(arg0); end
  def mask(*arg0); end
  def matte_color; end
  def matte_color=(arg0); end
  def matte_fill_to_border(x, y); end
  def matte_flood_fill(*arg0); end
  def matte_floodfill(x, y); end
  def matte_point(x, y); end
  def matte_replace(x, y); end
  def matte_reset!; end
  def mean_error_per_pixel; end
  def median_filter(*arg0); end
  def mime_type; end
  def minify!; end
  def minify; end
  def modulate(*arg0); end
  def monitor=(arg0); end
  def monochrome?; end
  def montage; end
  def morphology(arg0, arg1, arg2); end
  def morphology_channel(arg0, arg1, arg2, arg3); end
  def motion_blur(*arg0); end
  def negate(*arg0); end
  def negate_channel(*arg0); end
  def normalize; end
  def normalize_channel(*arg0); end
  def normalized_maximum_error; end
  def normalized_mean_error; end
  def number_colors; end
  def offset; end
  def offset=(arg0); end
  def oil_paint(*arg0); end
  def opaque(arg0, arg1); end
  def opaque?; end
  def opaque_channel(*arg0); end
  def ordered_dither(*arg0); end
  def orientation; end
  def orientation=(arg0); end
  def page; end
  def page=(arg0); end
  def paint_transparent(*arg0); end
  def palette?; end
  def pixel_color(*arg0); end
  def pixel_interpolation_method; end
  def pixel_interpolation_method=(arg0); end
  def polaroid(*arg0); end
  def posterize(*arg0); end
  def preview(arg0); end
  def profile!(arg0, arg1); end
  def properties; end
  def quality; end
  def quantize(*arg0); end
  def quantum_depth; end
  def quantum_operator(*arg0); end
  def radial_blur(arg0); end
  def radial_blur_channel(*arg0); end
  def raise(*arg0); end
  def random_threshold_channel(*arg0); end
  def recolor(arg0); end
  def reduce_noise(arg0); end
  def remap(*arg0); end
  def rendering_intent; end
  def rendering_intent=(arg0); end
  def resample!(*arg0); end
  def resample(*arg0); end
  def resize!(*arg0); end
  def resize(*arg0); end
  def resize_to_fill!(ncols, nrows = nil, gravity = nil); end
  def resize_to_fill(ncols, nrows = nil, gravity = nil); end
  def resize_to_fit!(cols, rows = nil); end
  def resize_to_fit(cols, rows = nil); end
  def roll(arg0, arg1); end
  def rotate!(*arg0); end
  def rotate(*arg0); end
  def rows; end
  def sample!(*arg0); end
  def sample(*arg0); end
  def scale!(*arg0); end
  def scale(*arg0); end
  def scene; end
  def segment(*arg0); end
  def selective_blur_channel(*arg0); end
  def self._load(arg0); end
  def self.capture(*arg0); end
  def self.constitute(arg0, arg1, arg2, arg3); end
  def self.from_blob(arg0); end
  def self.ping(arg0); end
  def self.read(arg0); end
  def self.read_inline(arg0); end
  def separate(*arg0); end
  def sepiatone(*arg0); end
  def set_channel_depth(arg0, arg1); end
  def shade(*arg0); end
  def shadow(*arg0); end
  def sharpen(*arg0); end
  def sharpen_channel(*arg0); end
  def shave!(arg0, arg1); end
  def shave(arg0, arg1); end
  def shear(arg0, arg1); end
  def sigmoidal_contrast_channel(*arg0); end
  def signature; end
  def sketch(*arg0); end
  def solarize(*arg0); end
  def sparse_color(*arg0); end
  def splice(*arg0); end
  def spread(*arg0); end
  def start_loop; end
  def start_loop=(arg0); end
  def stegano(arg0, arg1); end
  def stereo(arg0); end
  def store_pixels(arg0, arg1, arg2, arg3, arg4); end
  def strip!; end
  def swirl(arg0); end
  def texture_fill_to_border(x, y, texture); end
  def texture_flood_fill(arg0, arg1, arg2, arg3, arg4); end
  def texture_floodfill(x, y, texture); end
  def threshold(arg0); end
  def thumbnail!(*arg0); end
  def thumbnail(*arg0); end
  def ticks_per_second; end
  def ticks_per_second=(arg0); end
  def tint(*arg0); end
  def to_blob; end
  def to_color(arg0); end
  def total_colors; end
  def total_ink_density; end
  def transparent(*arg0); end
  def transparent_chroma(*arg0); end
  def transparent_color; end
  def transparent_color=(arg0); end
  def transpose!; end
  def transpose; end
  def transverse!; end
  def transverse; end
  def trim!(*arg0); end
  def trim(*arg0); end
  def undefine(arg0); end
  def unique_colors; end
  def units; end
  def units=(arg0); end
  def unsharp_mask(*arg0); end
  def unsharp_mask_channel(*arg0); end
  def view(x, y, width, height); end
  def vignette(*arg0); end
  def virtual_pixel_method; end
  def virtual_pixel_method=(arg0); end
  def watermark(*arg0); end
  def wave(*arg0); end
  def wet_floor(*arg0); end
  def white_threshold(*arg0); end
  def write(arg0); end
  def x_resolution; end
  def x_resolution=(arg0); end
  def y_resolution; end
  def y_resolution=(arg0); end
  include Comparable
end
class Magick::ImageList
  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def <<(obj); end
  def <=>(other); end
  def [](*args); end
  def []=(*args); end
  def __display__(*arg0); end
  def __map__!(&block); end
  def __map__(&block); end
  def __respond_to__?(*arg0); end
  def affinity(*arg0); end
  def animate(*arg0); end
  def append(arg0); end
  def assert_image(obj); end
  def assert_image_array(ary); end
  def at(*args, &block); end
  def average; end
  def clear; end
  def clone; end
  def coalesce; end
  def collect!(&block); end
  def collect(&block); end
  def combine(*arg0); end
  def compact!; end
  def compact; end
  def composite_layers(*arg0); end
  def concat(other); end
  def copy; end
  def cur_image; end
  def deconstruct; end
  def delay=(d); end
  def delete(obj, &block); end
  def delete_at(ndx); end
  def delete_if(&block); end
  def display; end
  def dup; end
  def each(*args, &block); end
  def each_index(*args, &block); end
  def empty?(*args, &block); end
  def eql?(other); end
  def fetch(*args, &block); end
  def fill(*args, &block); end
  def find_all(&block); end
  def first(*args, &block); end
  def flatten_images; end
  def from_blob(*blobs, &block); end
  def get_current; end
  def hash(*args, &block); end
  def include?(*args, &block); end
  def index(*args, &block); end
  def indexes(*args); end
  def indices(*args); end
  def initialize(*filenames, &block); end
  def insert(index, *args); end
  def inspect; end
  def iterations=(n); end
  def last(*args); end
  def length(*args, &block); end
  def map!(&block); end
  def map(&block); end
  def marshal_dump; end
  def marshal_load(ary); end
  def method_missing(meth_id, *args, &block); end
  def montage; end
  def morph(arg0); end
  def mosaic; end
  def new_image(cols, rows, *fill, &info_blk); end
  def optimize_layers(arg0); end
  def partition(&block); end
  def ping(*files, &block); end
  def pop; end
  def push(*objs); end
  def quantize(*arg0); end
  def read(*files, &block); end
  def reject!(&block); end
  def reject(&block); end
  def remap(*arg0); end
  def replace(other); end
  def respond_to?(meth_id, priv = nil); end
  def reverse!; end
  def reverse; end
  def reverse_each; end
  def rindex(*args, &block); end
  def scene; end
  def scene=(n); end
  def select(&block); end
  def set_current(current); end
  def shift; end
  def size(*args, &block); end
  def slice!(*args); end
  def slice(*args); end
  def sort!(*args, &block); end
  def ticks_per_second=(t); end
  def to_a; end
  def to_blob; end
  def uniq!(*_args); end
  def uniq; end
  def unshift(obj); end
  def values_at(*args); end
  def write(arg0); end
  def |(other); end
  include Comparable
  include Enumerable
end
class Magick::Draw
  def affine(sx, rx, ry, sy, tx, ty); end
  def affine=(arg0); end
  def align=(arg0); end
  def alpha(x, y, method); end
  def annotate(arg0, arg1, arg2, arg3, arg4, arg5); end
  def arc(start_x, start_y, end_x, end_y, start_degrees, end_degrees); end
  def bezier(*points); end
  def check_opacity(opacity); end
  def circle(origin_x, origin_y, perim_x, perim_y); end
  def clip_path(name); end
  def clip_rule(rule); end
  def clip_units(unit); end
  def clone; end
  def color(x, y, method); end
  def composite(*arg0); end
  def decorate(decoration); end
  def decorate=(arg0); end
  def define_clip_path(name); end
  def density=(arg0); end
  def draw(arg0); end
  def dup; end
  def ellipse(origin_x, origin_y, width, height, arc_start, arc_end); end
  def encoding(encoding); end
  def encoding=(arg0); end
  def enquote(str); end
  def fill(colorspec); end
  def fill=(arg0); end
  def fill_color(colorspec); end
  def fill_opacity(opacity); end
  def fill_pattern(colorspec); end
  def fill_pattern=(arg0); end
  def fill_rule(rule); end
  def font(name); end
  def font=(arg0); end
  def font_family(name); end
  def font_family=(arg0); end
  def font_size(points); end
  def font_stretch(stretch); end
  def font_stretch=(arg0); end
  def font_style(style); end
  def font_style=(arg0); end
  def font_weight(weight); end
  def font_weight=(arg0); end
  def get_multiline_type_metrics(*arg0); end
  def get_type_metrics(*arg0); end
  def gravity(grav); end
  def gravity=(arg0); end
  def image(composite, x, y, width, height, image_file_path); end
  def initialize; end
  def initialize_copy(arg0); end
  def inspect; end
  def interline_spacing(space); end
  def interline_spacing=(arg0); end
  def interword_spacing(space); end
  def interword_spacing=(arg0); end
  def kerning(space); end
  def kerning=(arg0); end
  def line(start_x, start_y, end_x, end_y); end
  def marshal_dump; end
  def marshal_load(arg0); end
  def opacity(opacity); end
  def path(cmds); end
  def pattern(name, x, y, width, height); end
  def point(x, y); end
  def pointsize(points); end
  def pointsize=(arg0); end
  def polygon(*points); end
  def polyline(*points); end
  def pop(*what); end
  def primitive(arg0); end
  def push(*what); end
  def rectangle(upper_left_x, upper_left_y, lower_right_x, lower_right_y); end
  def rotate(angle); end
  def rotation=(arg0); end
  def roundrectangle(center_x, center_y, width, height, corner_width, corner_height); end
  def scale(x, y); end
  def skewx(angle); end
  def skewy(angle); end
  def stroke(colorspec); end
  def stroke=(arg0); end
  def stroke_antialias(bool); end
  def stroke_color(colorspec); end
  def stroke_dasharray(*list); end
  def stroke_dashoffset(value = nil); end
  def stroke_linecap(value); end
  def stroke_linejoin(value); end
  def stroke_miterlimit(value); end
  def stroke_opacity(opacity); end
  def stroke_pattern(colorspec); end
  def stroke_pattern=(arg0); end
  def stroke_width(pixels); end
  def stroke_width=(arg0); end
  def text(x, y, text); end
  def text_align(alignment); end
  def text_anchor(anchor); end
  def text_antialias(boolean); end
  def text_antialias=(arg0); end
  def text_undercolor(color); end
  def tile=(arg0); end
  def translate(x, y); end
  def undercolor=(arg0); end
end
class Magick::Image::DrawOptions
  def affine=(arg0); end
  def align=(arg0); end
  def decorate=(arg0); end
  def density=(arg0); end
  def encoding=(arg0); end
  def fill=(arg0); end
  def fill_pattern=(arg0); end
  def font=(arg0); end
  def font_family=(arg0); end
  def font_stretch=(arg0); end
  def font_style=(arg0); end
  def font_weight=(arg0); end
  def gravity=(arg0); end
  def initialize; end
  def pointsize=(arg0); end
  def rotation=(arg0); end
  def stroke=(arg0); end
  def stroke_pattern=(arg0); end
  def stroke_width=(arg0); end
  def text_antialias=(arg0); end
  def tile=(arg0); end
  def undercolor=(arg0); end
end
class Magick::Pixel
  def <=>(arg0); end
  def ===(arg0); end
  def alpha; end
  def alpha=(arg0); end
  def black; end
  def black=(arg0); end
  def blue; end
  def blue=(arg0); end
  def clone; end
  def cyan; end
  def cyan=(arg0); end
  def dup; end
  def eql?(arg0); end
  def fcmp(*arg0); end
  def green; end
  def green=(arg0); end
  def hash; end
  def initialize(*arg0); end
  def initialize_copy(arg0); end
  def intensity; end
  def magenta; end
  def magenta=(arg0); end
  def marshal_dump; end
  def marshal_load(arg0); end
  def red; end
  def red=(arg0); end
  def self.from_color(arg0); end
  def self.from_hsla(*arg0); end
  def to_color(*arg0); end
  def to_hsla; end
  def to_s; end
  def yellow; end
  def yellow=(arg0); end
  include Observable
end
class Magick::ImageList::Montage
  def background_color=(arg0); end
  def border_color=(arg0); end
  def border_width=(arg0); end
  def compose=(arg0); end
  def filename=(arg0); end
  def fill=(arg0); end
  def font=(arg0); end
  def frame=(arg0); end
  def freeze; end
  def geometry=(arg0); end
  def gravity=(arg0); end
  def initialize; end
  def matte_color=(arg0); end
  def pointsize=(arg0); end
  def shadow=(arg0); end
  def stroke=(arg0); end
  def texture=(arg0); end
  def tile=(arg0); end
  def title=(arg0); end
end
class Magick::Image::Info
  def [](*arg0); end
  def []=(*arg0); end
  def antialias; end
  def antialias=(arg0); end
  def attenuate; end
  def attenuate=(arg0); end
  def authenticate; end
  def authenticate=(arg0); end
  def background_color; end
  def background_color=(arg0); end
  def border_color; end
  def border_color=(arg0); end
  def caption; end
  def caption=(arg0); end
  def channel(*arg0); end
  def colorspace; end
  def colorspace=(arg0); end
  def comment; end
  def comment=(arg0); end
  def compression; end
  def compression=(arg0); end
  def define(*arg0); end
  def delay; end
  def delay=(arg0); end
  def density; end
  def density=(arg0); end
  def depth; end
  def depth=(arg0); end
  def dispose; end
  def dispose=(arg0); end
  def dither; end
  def dither=(arg0); end
  def endian; end
  def endian=(arg0); end
  def extract; end
  def extract=(arg0); end
  def filename; end
  def filename=(arg0); end
  def fill; end
  def fill=(arg0); end
  def font; end
  def font=(arg0); end
  def format; end
  def format=(arg0); end
  def freeze; end
  def fuzz; end
  def fuzz=(arg0); end
  def gravity; end
  def gravity=(arg0); end
  def image_type; end
  def image_type=(arg0); end
  def initialize; end
  def interlace; end
  def interlace=(arg0); end
  def label; end
  def label=(arg0); end
  def matte_color; end
  def matte_color=(arg0); end
  def monitor=(arg0); end
  def monochrome; end
  def monochrome=(arg0); end
  def number_scenes; end
  def number_scenes=(arg0); end
  def orientation; end
  def orientation=(arg0); end
  def origin; end
  def origin=(arg0); end
  def page; end
  def page=(arg0); end
  def pointsize; end
  def pointsize=(arg0); end
  def quality; end
  def quality=(arg0); end
  def sampling_factor; end
  def sampling_factor=(arg0); end
  def scene; end
  def scene=(arg0); end
  def server_name; end
  def server_name=(arg0); end
  def size; end
  def size=(arg0); end
  def stroke; end
  def stroke=(arg0); end
  def stroke_width; end
  def stroke_width=(arg0); end
  def texture=(arg0); end
  def tile_offset; end
  def tile_offset=(arg0); end
  def transparent_color; end
  def transparent_color=(arg0); end
  def undefine(arg0, arg1); end
  def undercolor; end
  def undercolor=(arg0); end
  def units; end
  def units=(arg0); end
  def view; end
  def view=(arg0); end
end
class Magick::KernelInfo
  def clone; end
  def dup; end
  def initialize(arg0); end
  def scale(arg0, arg1); end
  def scale_geometry(arg0); end
  def self.builtin(arg0, arg1); end
  def unity_add(arg0); end
end
class Magick::Image::PolaroidOptions
  def align=(arg0); end
  def border_color=(arg0); end
  def decorate=(arg0); end
  def density=(arg0); end
  def encoding=(arg0); end
  def fill=(arg0); end
  def fill_pattern=(arg0); end
  def font=(arg0); end
  def font_family=(arg0); end
  def font_stretch=(arg0); end
  def font_style=(arg0); end
  def font_weight=(arg0); end
  def gravity=(arg0); end
  def initialize; end
  def pointsize=(arg0); end
  def shadow_color=(arg0); end
  def stroke=(arg0); end
  def stroke_pattern=(arg0); end
  def stroke_width=(arg0); end
  def text_antialias=(arg0); end
  def undercolor=(arg0); end
end
class Magick::GradientFill
  def fill(arg0); end
  def initialize(arg0, arg1, arg2, arg3, arg4, arg5); end
end
class Magick::TextureFill
  def fill(arg0); end
  def initialize(arg0); end
end
class Magick::ImageMagickError < StandardError
  def initialize(*arg0); end
  def magick_location; end
end
class Magick::Enum
  def <=>(arg0); end
  def ===(arg0); end
  def initialize(arg0, arg1); end
  def to_i; end
  def to_s; end
  def |(arg0); end
end
class Magick::AlignType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::AlphaChannelOption < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::AnchorType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ChannelType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ClassType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ColorspaceType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ComplianceType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::CompositeOperator < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::CompressionType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::DecorationType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::DisposeType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::DistortMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::DitherMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::EndianType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::FilterType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::GravityType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ImageType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::InterlaceType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::MagickFunction < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::LayerMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::MetricType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::NoiseType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::OrientationType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::PaintMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::PixelInterpolateMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::PreviewType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::QuantumExpressionOperator < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::RenderingIntent < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::ResolutionType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::SparseColorMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::SpreadMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::StorageType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::StretchType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::StyleType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::VirtualPixelMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::WeightType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::GeometryFlags < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::MorphologyMethod < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::KernelInfoType < Magick::Enum
  def initialize(arg0, arg1); end
  def inspect; end
  def self.values; end
end
class Magick::AffineMatrix < Struct
  def rx; end
  def rx=(_); end
  def ry; end
  def ry=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def sx; end
  def sx=(_); end
  def sy; end
  def sy=(_); end
  def tx; end
  def tx=(_); end
  def ty; end
  def ty=(_); end
end
class Magick::Primary < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
  def z; end
  def z=(_); end
end
class Magick::Chromaticity < Struct
  def blue_primary; end
  def blue_primary=(_); end
  def green_primary; end
  def green_primary=(_); end
  def red_primary; end
  def red_primary=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
  def white_point; end
  def white_point=(_); end
end
class Magick::Color < Struct
  def color; end
  def color=(_); end
  def compliance; end
  def compliance=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
end
class Magick::Point < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
end
class Magick::Rectangle < Struct
  def height; end
  def height=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
  def width; end
  def width=(_); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
end
class Magick::Segment < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
  def x1; end
  def x1=(_); end
  def x2; end
  def x2=(_); end
  def y1; end
  def y1=(_); end
  def y2; end
  def y2=(_); end
end
class Magick::Font < Struct
  def description; end
  def description=(_); end
  def encoding; end
  def encoding=(_); end
  def family; end
  def family=(_); end
  def format; end
  def format=(_); end
  def foundry; end
  def foundry=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def stretch; end
  def stretch=(_); end
  def style; end
  def style=(_); end
  def to_s; end
  def weight; end
  def weight=(_); end
end
class Magick::TypeMetric < Struct
  def ascent; end
  def ascent=(_); end
  def bounds; end
  def bounds=(_); end
  def descent; end
  def descent=(_); end
  def height; end
  def height=(_); end
  def max_advance; end
  def max_advance=(_); end
  def pixels_per_em; end
  def pixels_per_em=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def to_s; end
  def underline_position; end
  def underline_position=(_); end
  def underline_thickness; end
  def underline_thickness=(_); end
  def width; end
  def width=(_); end
end
class Magick::GeometryValue < Magick::Enum
end
class Magick::Geometry
  def flag; end
  def flag=(arg0); end
  def height; end
  def height=(arg0); end
  def initialize(width = nil, height = nil, x = nil, y = nil, flag = nil); end
  def self.from_s(str); end
  def to_s; end
  def width; end
  def width=(arg0); end
  def x; end
  def x=(arg0); end
  def y; end
  def y=(arg0); end
end
module Magick::IPTC
end
module Magick::IPTC::Envelope
end
module Magick::IPTC::Application
end
module Magick::IPTC::Pre_ObjectData_Descriptor
end
module Magick::IPTC::ObjectData
end
module Magick::IPTC::Post_ObjectData_Descriptor
end
class Magick::Image::View
  def [](*args); end
  def dirty; end
  def dirty=(arg0); end
  def height; end
  def initialize(img, x, y, width, height); end
  def sync(force = nil); end
  def update(rows); end
  def width; end
  def x; end
  def y; end
end
class Magick::Image::View::Pixels < Array
  def blue; end
  def blue=(v); end
  def green; end
  def green=(v); end
  def opacity; end
  def opacity=(v); end
  def red; end
  def red=(v); end
  include Observable
end
class Magick::Image::View::Rows
  def [](*args); end
  def []=(*args); end
  def cols(*args); end
  def each; end
  def initialize(view, width, height, rows); end
  def update(pixel); end
  include Observable
end
class Magick::OptionalMethodArguments
  def define(key, val = nil); end
  def highlight_color=(color); end
  def initialize(img); end
  def lowlight_color=(color); end
  def method_missing(mth, val); end
end
class Magick::HatchFill
  def fill(img); end
  def initialize(bgcolor, hatchcolor = nil, dist = nil); end
end
class Magick::SolidFill
  def fill(img); end
  def initialize(bgcolor); end
end
